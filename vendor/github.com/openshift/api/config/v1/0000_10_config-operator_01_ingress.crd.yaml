apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: ingresses.config.openshift.io
  annotations:
    include.release.openshift.io/ibm-cloud-managed: "true"
    include.release.openshift.io/self-managed-high-availability: "true"
    include.release.openshift.io/single-node-developer: "true"
spec:
  group: config.openshift.io
  names:
    kind: Ingress
    listKind: IngressList
    plural: ingresses
    singular: ingress
  scope: Cluster
  preserveUnknownFields: false
  versions:
  - name: v1
    served: true
    storage: true
  subresources:
    status: {}
  "validation":
    "openAPIV3Schema":
      description: Ingress holds cluster-wide information about ingress, including
        the default ingress domain used for routes. The canonical name is `cluster`.
      type: object
      required:
      - spec
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: spec holds user settable values for configuration
          type: object
          properties:
            appsDomain:
              description: appsDomain is an optional domain to use instead of the
                one specified in the domain field when a Route is created without
                specifying an explicit host. If appsDomain is nonempty, this value
                is used to generate default host values for Route. Unlike domain,
                appsDomain may be modified after installation. This assumes a new
                ingresscontroller has been setup with a wildcard certificate.
              type: string
            componentRoutes:
              description: "componentRoutes is an optional list of routes that are
                managed by OpenShift components that a cluster-admin is able to configure
                the hostname and serving certificate for. The namespace and name of
                each route in this list should match an existing entry in the status.componentRoutes
                list. \n To determine the set of configurable Routes, look at namespace
                and name of entries in the .status.componentRoutes list, where participating
                operators write the status of configurable routes."
              type: array
              items:
                description: ComponentRouteSpec allows for configuration of a route's
                  hostname and serving certificate.
                type: object
                required:
                - hostname
                - name
                - namespace
                properties:
                  hostname:
                    description: hostname is the hostname that should be used by the
                      route.
                    type: string
                    format: hostname
                  name:
                    description: "name is the logical name of the route to customize.
                      \n The namespace and name of this componentRoute must match
                      a corresponding entry in the list of status.componentRoutes
                      if the route is to be customized."
                    type: string
                    maxLength: 256
                    minLength: 1
                  namespace:
                    description: "namespace is the namespace of the route to customize.
                      \n The namespace and name of this componentRoute must match
                      a corresponding entry in the list of status.componentRoutes
                      if the route is to be customized."
                    type: string
                    maxLength: 63
                    minLength: 1
                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                  servingCertKeyPairSecret:
                    description: servingCertKeyPairSecret is a reference to a secret
                      of type `kubernetes.io/tls` in the openshift-config namespace.
                      The serving cert/key pair must match and will be used by the
                      operator to fulfill the intent of serving with this name. If
                      the custom hostname uses the default routing suffix of the cluster,
                      the Secret specification for a serving certificate will not
                      be needed.
                    type: object
                    required:
                    - name
                    properties:
                      name:
                        description: name is the metadata.name of the referenced secret
                        type: string
            domain:
              description: "domain is used to generate a default host name for a route
                when the route's host name is empty. The generated host name will
                follow this pattern: \"<route-name>.<route-namespace>.<domain>\".
                \n It is also used as the default wildcard domain suffix for ingress.
                The default ingresscontroller domain will follow this pattern: \"*.<domain>\".
                \n Once set, changing domain is not currently supported."
              type: string
            requiredRouteAnnotations:
              description: requiredRouteAnnotations is an optional list of default
                annotations for newly created routes. If requiredrouteAnnotations
                is nonempty, this value is used to generate default host values for
                Route.  Unlike domain, appsDomain may be modified after installation.  This
                assumes a new ingresscontroller has been setup with a wildcard certificate.
              type: array
              items:
                description: RequiredRouteAnnotations specifies annotations that are
                  required to be set on newly created routes matching some criteria.
                type: object
                required:
                - requiredAnnotations
                properties:
                  domains:
                    description: domains is an optional list of domains for which
                      these annotations are required.  If domains is specified and
                      a route is created with a spec.host matching one of the domains,
                      the route must specify the annotations specified in requiredAnnotations.  If
                      domains is empty, the specified annotations are required for
                      all newly created routes.
                    type: string
                  namespaceSelector:
                    description: "excludedNamespacesSelector may be provided to exempt
                      routes in the selected namespaces from requiring the annotations
                      in requiredAnnotations. \n If this field is unset, routes in
                      all namespaces are included."
                    type: object
                    properties:
                      matchExpressions:
                        description: matchExpressions is a list of label selector
                          requirements. The requirements are ANDed.
                        type: array
                        items:
                          description: A label selector requirement is a selector
                            that contains values, a key, and an operator that relates
                            the key and values.
                          type: object
                          required:
                          - key
                          - operator
                          properties:
                            key:
                              description: key is the label key that the selector
                                applies to.
                              type: string
                            operator:
                              description: operator represents a key's relationship
                                to a set of values. Valid operators are In, NotIn,
                                Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If
                                the operator is In or NotIn, the values array must
                                be non-empty. If the operator is Exists or DoesNotExist,
                                the values array must be empty. This array is replaced
                                during a strategic merge patch.
                              type: array
                              items:
                                type: string
                      matchLabels:
                        description: matchLabels is a map of {key,value} pairs. A
                          single {key,value} in the matchLabels map is equivalent
                          to an element of matchExpressions, whose key field is "key",
                          the operator is "In", and the values array contains only
                          "value". The requirements are ANDed.
                        type: object
                        additionalProperties:
                          type: string
                  policy:
                    description: "policy specifies the policy for user-provided annotation
                      values on newly created routes.  The following values are allowed
                      for this field: \n * \"Allow\" allows the user to provide arbitrary
                      annotation values.   With this policy, if an annotation key
                      in requiredAnnotations is   not specified on the route at all,
                      the route is rejected.  If every   annotation key in requiredAnnotations
                      is specified, then the route   is admitted, irrespective of
                      the annotation values. \n * \"AllowWithDefaulting\" allows the
                      user to provide arbitrary   annotation values, and sets defaults
                      if an annotation is missing.   With this policy, if an annotation
                      key in requiredAnnotations is   not specified on the route at
                      all, the annotation from   requiredAnnotations (key and value)
                      is added. \n * \"Deny\" prohibits the user from specifying annotation
                      values that   differ from those in requiredAnnotations.  With
                      this policy, if an   annotation in requiredAnnotations is not
                      specified with the same   key *and* value on the route, the
                      route is rejected. \n * \"Override\" overrides user-provided
                      annotations with the annotations   in requiredAnnotations.  With
                      this policy, if an annotation in   requiredAnnotations is not
                      specified on the route, the annotation   is copied from requiredAnnotations
                      is used, and if an annotation   key in requiredAnnotations is
                      specified on the route, the   annotation's value is overridden
                      with the value from   requiredAnnotations. \n Note that the
                      \"AllowWithDefaulting\" and \"Override\" options are dangerous
                      to use.  With these options, a route that is created using a
                      particular definition one cluster may behave differently from
                      a route that is created using the same definition but on a cluster
                      with different required route annotations configured.  Using
                      \"Allow\" or \"Deny\" is safer because either option causes
                      route creation to fail, loudly, if an annotation is not set
                      as expected for the cluster."
                    type: string
                  requiredAnnotations:
                    description: requiredAnnotations is a list of annotations that
                      are required on newly created routes.  This field's value comprises
                      key-value pairs where the key specifies a required annotation
                      key and the value expresses a suggested annotation value.  If
                      a route specifies has an annotation with each of the required
                      annotation keys, the route is admitted.  If the route is missing
                      any required annotation, the route is rejected with a message
                      indicating which annotation key is missing and what the suggested
                      annotation value is.
                    type: object
                    additionalProperties:
                      type: string
        status:
          description: status holds observed values from the cluster. They may not
            be overridden.
          type: object
          properties:
            componentRoutes:
              description: componentRoutes is where participating operators place
                the current route status for routes whose hostnames and serving certificates
                can be customized by the cluster-admin.
              type: array
              items:
                description: ComponentRouteStatus contains information allowing configuration
                  of a route's hostname and serving certificate.
                type: object
                required:
                - defaultHostname
                - name
                - namespace
                - relatedObjects
                properties:
                  conditions:
                    description: "conditions are used to communicate the state of
                      the componentRoutes entry. \n Supported conditions include Available,
                      Degraded and Progressing. \n If available is true, the content
                      served by the route can be accessed by users. This includes
                      cases where a default may continue to serve content while the
                      customized route specified by the cluster-admin is being configured.
                      \n If Degraded is true, that means something has gone wrong
                      trying to handle the componentRoutes entry. The currentHostnames
                      field may or may not be in effect. \n If Progressing is true,
                      that means the component is taking some action related to the
                      componentRoutes entry."
                    type: array
                    items:
                      description: "Condition contains details for one aspect of the
                        current state of this API Resource. --- This struct is intended
                        for direct use as an array at the field path .status.conditions.
                        \ For example, type FooStatus struct{     // Represents the
                        observations of a foo's current state.     // Known .status.conditions.type
                        are: \"Available\", \"Progressing\", and \"Degraded\"     //
                        +patchMergeKey=type     // +patchStrategy=merge     // +listType=map
                        \    // +listMapKey=type     Conditions []metav1.Condition
                        `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                        protobuf:\"bytes,1,rep,name=conditions\"` \n     // other
                        fields }"
                      type: object
                      required:
                      - lastTransitionTime
                      - message
                      - reason
                      - status
                      - type
                      properties:
                        lastTransitionTime:
                          description: lastTransitionTime is the last time the condition
                            transitioned from one status to another. This should be
                            when the underlying condition changed.  If that is not
                            known, then using the time when the API field changed
                            is acceptable.
                          type: string
                          format: date-time
                        message:
                          description: message is a human readable message indicating
                            details about the transition. This may be an empty string.
                          type: string
                          maxLength: 32768
                        observedGeneration:
                          description: observedGeneration represents the .metadata.generation
                            that the condition was set based upon. For instance, if
                            .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
                            is 9, the condition is out of date with respect to the
                            current state of the instance.
                          type: integer
                          format: int64
                          minimum: 0
                        reason:
                          description: reason contains a programmatic identifier indicating
                            the reason for the condition's last transition. Producers
                            of specific condition types may define expected values
                            and meanings for this field, and whether the values are
                            considered a guaranteed API. The value should be a CamelCase
                            string. This field may not be empty.
                          type: string
                          maxLength: 1024
                          minLength: 1
                          pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                        status:
                          description: status of the condition, one of True, False,
                            Unknown.
                          type: string
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                        type:
                          description: type of condition in CamelCase or in foo.example.com/CamelCase.
                            --- Many .condition.type values are consistent across
                            resources like Available, but because arbitrary conditions
                            can be useful (see .node.status.conditions), the ability
                            to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                          type: string
                          maxLength: 316
                          pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                  consumingUsers:
                    description: consumingUsers is a slice of ServiceAccounts that
                      need to have read permission on the servingCertKeyPairSecret
                      secret.
                    type: array
                    maxItems: 5
                    items:
                      description: ConsumingUser is an alias for string which we add
                        validation to. Currently only service accounts are supported.
                      type: string
                      maxLength: 512
                      minLength: 1
                      pattern: ^system:serviceaccount:[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                  currentHostnames:
                    description: currentHostnames is the list of current names used
                      by the route. Typically, this list should consist of a single
                      hostname, but if multiple hostnames are supported by the route
                      the operator may write multiple entries to this list.
                    type: array
                    minItems: 1
                    items:
                      description: Hostname is an alias for hostname string validation.
                      type: string
                      format: hostname
                  defaultHostname:
                    description: defaultHostname is the hostname of this route prior
                      to customization.
                    type: string
                    format: hostname
                  name:
                    description: "name is the logical name of the route to customize.
                      It does not have to be the actual name of a route resource but
                      it cannot be renamed. \n The namespace and name of this componentRoute
                      must match a corresponding entry in the list of spec.componentRoutes
                      if the route is to be customized."
                    type: string
                    maxLength: 256
                    minLength: 1
                  namespace:
                    description: "namespace is the namespace of the route to customize.
                      It must be a real namespace. Using an actual namespace ensures
                      that no two components will conflict and the same component
                      can be installed multiple times. \n The namespace and name of
                      this componentRoute must match a corresponding entry in the
                      list of spec.componentRoutes if the route is to be customized."
                    type: string
                    maxLength: 63
                    minLength: 1
                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                  relatedObjects:
                    description: relatedObjects is a list of resources which are useful
                      when debugging or inspecting how spec.componentRoutes is applied.
                    type: array
                    minItems: 1
                    items:
                      description: ObjectReference contains enough information to
                        let you inspect or modify the referred object.
                      type: object
                      required:
                      - group
                      - name
                      - resource
                      properties:
                        group:
                          description: group of the referent.
                          type: string
                        name:
                          description: name of the referent.
                          type: string
                        namespace:
                          description: namespace of the referent.
                          type: string
                        resource:
                          description: resource of the referent.
                          type: string
